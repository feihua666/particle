spring:
  application:
    # 应用名称
    name: particle-demo-start
  profiles:
    include:
      - knife4j
      - swagger
      - log4j2
      - sleuth
      - datasource
      - mybatis-plus
      - mybatis-plus-tenant
      - actuator
      - boot-admin-client-local
      - boot-admin-server
      - session
      - resourceserver-local
      - quartz
      - freemarker
      - freemarker-dev
      - ai
  datasource:
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为 master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
          url: jdbc:mysql://localhost/particle_test?${particle.datasource.mysql.url-query}
          username: root
          password: rootroot
          driver-class-name: ${particle.datasource.mysql.driver} # 3.2.0开始支持SPI可省略此配置
        # postgresql 主要用于ai存储向量
#        masterPg:
#          url: jdbc:postgresql://localhost/particle_test?${particle.datasource.postgresql.url-query:}
#          username: postgres
#          password: postgrespostgres
#          driver-class-name: ${particle.datasource.postgresql.driver}

  # 注意，这里的配置是spring的但实现已经自定义，参考 global-datasource-boot-starter 组件 sqlinit 包实现
  sql:
    init:
      schema-locations:
        #- classpath:db/schema.particle-demo.sql
        - classpath:db/schema.area.sql
        - classpath:db/schema.dict.sql
        - classpath:db/schema.func.sql
        - classpath:db/schema.user.sql
        - classpath:db/schema.role.sql
        - classpath:db/schema.global_message_event.sql
        - classpath:db/schema.global_message_event_consume_record.sql
        - classpath:db/schema.low-code.sql
        - classpath:db/schema.data-query.sql
        - classpath:db/schema.tenant.sql
        - classpath:db/schema.dept.sql
        - classpath:db/schema.op-log.sql
        - classpath:db/schema.tracking.sql
        - classpath:db/schema.message.sql
        - classpath:db/schema.oauth2authorization.sql
        - classpath:db/schema.global_oauth2_authorization.sql
        - classpath:db/schema.global_oauth2_authorization_consent.sql
        - classpath:db/schema.global_oauth2_registered_client.sql
        - classpath:db/schema.global_spring_session.sql
        - classpath:db/schema.global_concurrency_shedlock.sql
        - classpath:db/schema.open-platform.sql
        - classpath:db/schema.report.sql
        - classpath:db/schema.usage-count.sql
        - classpath:db/schema.global_captcha.sql
        - classpath:db/schema.feedback.sql
        - classpath:db/schema.crm.sql
        # 建议手动执行，因为可能跑数据太多，一不心给弄没了
        #- classpath:db/schema.dream.sql
        - classpath:db/schema.config.sql
        - classpath:db/schema.data-constraint.sql
        - classpath:db/schema.data.sql
        - classpath:db/schema.scheduler.sql
        - classpath:org/quartz/impl/jdbcjobstore/tables_mysql_innodb.sql
        - classpath:db/schema.navigation.sql
        - classpath:db/schema.agi.sql
      data-locations:
        - classpath:db/data.particle-demo.sql
        - classpath:db/data.area.sql
        - classpath:db/data.dict.sql
        - classpath:db/data.func.sql
        - classpath:db/data.user.sql
        - classpath:db/data.role.sql
        - classpath:db/data.role.virtual_superadmin.sql
        - classpath:db/data.low-code.sql
        - classpath:db/data.low-code.demo.sql
        - classpath:db/data.tools.sql
        - classpath:db/data.data-query.sql
        - classpath:db/data.data-query.demo.sql
        - classpath:db/data.tenant.sql
        - classpath:db/data.dept.sql
        - classpath:db/data.op-log.sql
        - classpath:db/data.tracking.sql
        - classpath:db/data.message.sql
        - classpath:db/data.oauth2authorization.sql
        - classpath:db/data.oauth2authorization.demo.sql
        - classpath:db/data.open-platform.sql
        - classpath:db/data.open-platform.demo.sql
        - classpath:db/data.report.sql
        - classpath:db/data.usage-count.sql
        - classpath:db/data.feedback.sql
        - classpath:db/data.crm.sql
        - classpath:db/data.dream.sql
        - classpath:db/data.config.sql
        - classpath:db/data.data-constraint.sql
        - classpath:db/data.data.sql
        - classpath:db/data.scheduler.sql
        - classpath:db/data.navigation.sql
        - classpath:db/data.agi.sql
      # 默认 NEVER，太危险了，因为本机开发有部分是脚本配置依赖数据，比如数据查询和报告模板等，换了一个环境，全部数据没有了，还好通过binlog恢复了
      mode: NEVER # ALWAYS NEVER
  servlet:
    multipart:
      max-request-size: 500MB
      max-file-size: 50MB
  cloud:
    stream:
      # binder 们
      binders:
        integration:
          type: integration
      # 通道与binder绑定关系
      bindings:
        # 生产者与消费者目标要一致，自定义值，相当于一个消息队列名称
        # 模板消息生产者与消费者
        templatingNoticeMessageConsumer-in-0:
          destination: templating_notice_message
        templatingNoticeMessageProducer-out-0:
          destination: templating_notice_message
        # 开放平台开放接口调用记录
        openplatformOpenapiRecordMessageConsumer-in-0:
          destination: openplatform_openapirecord_message
        openplatformOpenapiRecordProducer-out-0:
          destination: openplatform_openapirecord_message
      # 配置多个 binder 时，必需指定的一个默认binder,否则启动报错，随便写一个不存在的字符串也会报错
      default-binder: integration
    # 声名的函数式编程定义，如果使用交互式编程(如：TestController手动发送)发送消息，可以不指定生产者
    function:
      # 实现了 java.util.function.Consumer 接口的bean名称消费类，要与bindings的消费或生产者名称前缀一致（如：templatingNoticeMessageConsumer-in-0 的前缀应该是 templatingNoticeMessageConsumer）
      definition: templatingNoticeMessageConsumer;openplatformOpenapiRecordMessageConsumer
  mvc:
    async:
      # 在agent流式对话中ai响应持续时间可能较慢，这里需要调整一下时间，目前5分钟
      request-timeout: 5m

server:
  servlet:
    encoding:
      # 在接收请求和返回数据，强制 utf-8 编码
      # encoding 配置默认为 utf-8 编码 参见：org.springframework.boot.web.servlet.server.Encoding.DEFAULT_CHARSET
      force: true
    session:
      timeout: 7d
  error:
    include-exception: true
    include-binding-errors: always
    include-stacktrace: always

particle:
  session:
    # 使用jdbc存储session，如果单机部署可以使用内存存储，改为 none
    store-type: jdbc
  # 参见 com.particle.global.projectinfo.ProjectInfo
  project-info:
    component:
      # 后端组件全部启用
      enable:
        all: true
  captcha:
    # 参见 com.particle.global.captcha.security.CaptchaSecurityFilter
    filter:
      enabled: true
      uris:
        # 登录添加验证码校验
        - /login
        # 获取动态验证码，需要先校验静态验证码
        - /captcha/getDynamicCaptcha
      # 以下 check 配置仅在 /login 登录时，配置哪些用户不需要验证码
      #check:
        #no-captcha-login-usernames:
        #  - superadmin
  dynamic-captcha:
    # 参见 com.particle.global.captcha.security.DynamicCaptchaSecurityFilter
    filter:
      enabled: true
      uris:
        # 这里随便举例 动态验证码登录独立校验，不需要该拦截器支持，如果配置会有冲突
        - /loginCaptcha
        - /user-identifier-pwd/login/user/findBackPassword
      uriIdentifier:
        '[/loginCaptcha]': username
        '[/user-identifier-pwd/login/user/findBackPassword]': identifier
    # 参见 com.particle.global.captcha.endpoint.DynamicCaptchaNotifyProperties
    notifyIdentifiers:
      # 配置发送动态验证码的模板
      # 如果 key 中有特殊字符 需要加中括号,并使用双引号（单引号也可以），参考：https://blog.csdn.net/weixin_38295272/article/details/117631314
      '[/loginCaptcha]': user_login_dynamic_captcha
      '[/user-identifier-pwd/login/user/findBackPassword]': user_find_back_password_dynamic_captcha
  # 该配置对应 com.particle.global.oss.GlobalOssProperties 配置属性
  oss:
    defaultClient: localClient
    concatEndpoint: false
    local:
      localClient:
        # 访问的地址
        endpoint: http://localhost:8080/oss/download
        basePath: /Users/yw/temp/localosstest
        bucketName: localClientBucket
  # 参见 com.particle.global.notification.GlobalNotificationProperties
  notification:
    # 提供系统级别的全局邮件通知配置
    email:
      # 邮件服务器的SMTP地址，可选，默认为smtp.<发件人邮箱后缀>
      host: smtp.163.com
      # 邮件服务器的SMTP端口，可选，默认25
      port: 25
      # 发件人（必须正确，否则发送失败）
      from: particle_particle@163.com
      # 用户名，默认为发件人邮箱前缀,注意用户名和密码需要匹配，否则认证失败
      user: particle_particle
      # 密码（注意，某些邮箱需要为SMTP服务单独设置授权码，详情查看相关帮助）163 邮箱密码不是用户登录密码，是邮箱的授权码
      pass: xxxx
    #alert:
    #  wxcpWebhooks:
    #    - https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxx
  # 数据查询对开放接口支持，参见：com.particle.dataquery.infrastructure.dataapi.gateway.impl.DefaultDataApiForOpenapiRemoteQueryGatewayImpl.Config
  dataquery:
    openapi:
      config:
        # 默认不开启，这主要用在分系统部署，分系统访问远程服务系统
        enabled: false
        remoteDomain: http://localhost:8080
        appId: 1688811472965656576
        appSecret: 03b109817ddc4269a40d30ca12459511
