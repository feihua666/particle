spring:
  application:
    # 应用名称
    name: particle-demo-start
  profiles:
    include:
      - knife4j
      - swagger
      - log4j2
      - sleuth
      - datasource
      - mybatis-plus
      - mybatis-plus-tenant
  datasource:
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为 master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
          url: jdbc:mysql://localhost/particle_test?${particle.datasource.mysql.url-query}
          username: root
          password: rootroot
          driver-class-name: ${particle.datasource.mysql.driver} # 3.2.0开始支持SPI可省略此配置
  # 注意，这里的配置是spring的但实现已经自定义，参考 global-datasource-boot-starter 组件 sqlinit 包实现
  sql:
    init:
      schema-locations:
        - classpath:db/schema.particle-demo.sql
        - classpath:db/schema.area.sql
        - classpath:db/schema.dict.sql
        - classpath:db/schema.func.sql
        - classpath:db/schema.generator.sql
        - classpath:db/schema.user.sql
        - classpath:db/schema.role.sql
        - classpath:db/schema.global_message_event.sql
        - classpath:db/schema.global_message_event_consume_record.sql
        - classpath:db/schema.low-code.sql
        - classpath:db/schema.data-query.sql
        - classpath:db/schema.tenant.sql
        - classpath:db/schema.dept.sql
        - classpath:db/schema.op-log.sql
        - classpath:db/schema.tracking.sql
        - classpath:db/schema.message.sql
      data-locations:
        - classpath:db/data.particle-demo.sql
        - classpath:db/data.area.sql
        - classpath:db/data.dict.sql
        - classpath:db/data.func.sql
        - classpath:db/data.generator.sql
        - classpath:db/data.user.sql
        - classpath:db/data.role.sql
        - classpath:db/data.low-code.sql
        - classpath:db/data.low-code.demo.sql
        - classpath:db/data.tools.sql
        - classpath:db/data.data-query.sql
        - classpath:db/data.data-query.demo.sql
        - classpath:db/data.tenant.sql
        - classpath:db/data.dept.sql
        - classpath:db/data.op-log.sql
        - classpath:db/data.tracking.sql
        - classpath:db/data.message.sql
      mode: ALWAYS # ALWAYS NEVER
  servlet:
    multipart:
      max-request-size: 500MB
      max-file-size: 50MB
  cloud:
    stream:
      # binder 们，默认情况下 binders配置不会生效，因为使用了testBinder。需要修改配置 particle.message.testBinder.enabled=false以启用实际的mq中间件binder
      binders:
        local:
          type: local
      # 通道与binder绑定关系
      bindings:
        templatingNoticeMessageConsumer-in-0:
          destination: templating_notice_message
        templatingNoticeMessageProducer-out-0:
          destination: templating_notice_message
      # 配置多个 binder 时，必需指定的一个默认binder,否则启动报错，随便写一个不存在的字符串也会报错
      default-binder: local
    # 声名的函数式编程定义，如果使用交互式编程(如：TestController手动发送)发送消息，可以不指定生产者
    function:
      # 实现了 java.util.function.Consumer 接口的bean名称消费类
      definition: templatingNoticeMessageConsumer
server:
  servlet:

    encoding:
      # 在接收请求和返回数据，强制 utf-8 编码
      # encoding 配置默认为 utf-8 编码 参见：org.springframework.boot.web.servlet.server.Encoding.DEFAULT_CHARSET
      force: true

particle:
  # 参见 com.particle.global.projectinfo.ProjectInfo
  project-info:
    component:
      # 后端组件全部启用
      enable:
        all: true
  captcha:
    # 参见 com.particle.global.captcha.security.CaptchaSecurityFilter
    filter:
      enabled: true
      uris:
        # 登录添加验证码校验
        - /login
  dynamic-captcha:
    # 参见 com.particle.global.captcha.security.DynamicCaptchaSecurityFilter
    filter:
      enabled: true
      uris:
        # 这里随便举例 动态验证码登录独立校验，不需要该拦截器支持，如果配置会有冲突
        - /loginCaptcha111
    uriIdentifier:
      '[/loginCaptcha111]': username
    # 参见 com.particle.global.captcha.endpoint.DynamicCaptchaNotifyProperties
    notifyIdentifiers:
      '/loginCaptcha': user_login_dynamic_captcha
  # 该配置对应 com.particle.global.oss.GlobalOssProperties 配置属性
  oss:
    defaultClient: testLocal
    concatEndpoint: false
    local:
      testLocal:
        # 访问的地址
        endpoint: http://localhost:8080/oss/download
        basePath: /Users/yw/temp/localosstest
        bucketName: localtestbucket
  # 参见 com.particle.global.notification.GlobalNotificationProperties
  notification:
    email:
      # 邮件服务器的SMTP地址，可选，默认为smtp.<发件人邮箱后缀>
      host: smtp.exmail.qq.com
      # 邮件服务器的SMTP端口，可选，默认25
      port: 222
      # 发件人（必须正确，否则发送失败）
      from: xxxx@example.com
      # 用户名，默认为发件人邮箱前缀
      user:
      # 密码（注意，某些邮箱需要为SMTP服务单独设置授权码，详情查看相关帮助）
      pass: xxxx