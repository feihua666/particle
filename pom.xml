<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.16</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.particle</groupId>
    <artifactId>particle</artifactId>
    <version>2.1.0-beta</version>
    <packaging>pom</packaging>
    <name>particle</name>
    <description>particle project for Spring Boot</description>
    <modules>
        <module>common</module>
        <module>component</module>
        <module>global</module>
        <module>project</module>
    </modules>
    <!-- 全局属性 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- idea 创建 module 自动生成 -->
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <!-- spring cloud 版本 -->
        <spring-cloud.version>2021.0.8</spring-cloud.version>
        <!-- 定义项目的版本和本pom一致，所有子项目间相互依赖请使用该变量版本 -->
        <particle.version>${project.version}</particle.version>
        <!-- 第三方工具集合，请优先使用该工具集 注意升级该版本，需要注意是否在global-tool中重写的类是否有变化-->
        <hutool-all.version>5.8.21</hutool-all.version>
        <!-- 强大的java工具类 ，全局引入，方便使用-->
        <guava.version>30.1.1-jre</guava.version>
        <!-- 实体转换 -->
        <org.mapstruct.version>1.4.1.Final</org.mapstruct.version>
        <!--已过时，使用 springdoc.version， swagger 接口文档 截止到现在（2023-07-19 21:54:17） 该版本已经停更了 已经被 springdoc openapi替代 参见：https://github.com/springdoc/springdoc-openapi-->
        <springfox-boot-starter.version>3.0.0</springfox-boot-starter.version>
        <!-- 已过时，使用新的 knife4j-openapi3-spring-boot-starter， swagger ui-接口文档 文档参考：https://doc.xiaominfo.com/ -->
        <knife4j-spring-boot-starter.version>3.0.3</knife4j-spring-boot-starter.version>
        <!-- springdoc(springdoc 即是openapi3的实现，springfox其实是openapi2的实现) 版本 github：https://github.com/springdoc/springdoc-openapi 文章参考：https://www.rstk.cn/news/147270.html、https://zhuanlan.zhihu.com/p/559882901 直接引入springdoc-openapi-ui会依赖全部引入-->
        <springdoc.version>1.7.0</springdoc.version>
        <!-- 定义一个注解版本方便仅引入注解 -->
        <swagger-annotations-v3.version>2.2.9</swagger-annotations-v3.version>
        <!-- 截止到现在（2023-07-19 21:54:17） swagger（其实也经不是swagger了，但ui还是用的swagger的ui，因为swagger ui v3支持openapi3规范）已经出了springdoc openapi ，只需要引入 knife4j 已经依赖引入了springdoc-->
        <!-- 注意在升级时需要同步修改是否兼容 global-swagger-boot-starter 中重写的类-->
        <knife4j-openapi3-spring-boot-starter.version>4.3.0</knife4j-openapi3-spring-boot-starter.version>
        <!-- mybatis-plus-boot-starter -->
        <!-- 注意在升级时，因为自定义了部分逻辑，需要同步修改是否兼容 参见：global-mybatis-plus-boot-starter -->
        <!-- 注意在升级时详情查看 com.baomidou.mybatisplus.core.conditions.segments.README.md -->
        <mybatis-plus-boot-starter.version>3.5.3.2</mybatis-plus-boot-starter.version>

        <!-- 动态多数据源，见 global-datasource-boot-starter 引入提供统一依赖 -->
        <dynamic-datasource.version>4.1.1</dynamic-datasource.version>
        <!-- 汉字转拼音 -->
        <pinyin4j.version>2.5.1</pinyin4j.version>
        <!-- 主要用于图片参数，当前主要是苹果手机图片旋转问题 -->
        <metadata-extractor.version>2.18.0</metadata-extractor.version>
        <!-- https://github.com/oldratlee/log4j2-ttl-thread-context-map -->
        <log4j2-ttl-thread-context-map.version>1.3.3</log4j2-ttl-thread-context-map.version>
        <!-- Log4j2 AsyncLogger -->
        <disruptor.version>3.4.4</disruptor.version>

        <!-- 测试数据用 可以将实体填充数据 测试用例使用-->
        <jmockdata.version>4.2.0</jmockdata.version>
        <!-- shedlock是一个分页式锁支持 目前在 global-concurrency-boot-starter使用，以支持分页式锁，主要是 global-messaging-boot-starter 消息模块使用-->
        <shedlock.version>4.41.0</shedlock.version>

        <!-- 类似于freeMarker的模板引擎 -->
        <com.jfinal.enjoy>5.0.3</com.jfinal.enjoy>
        <!-- groovy脚本，添加主要是为了数据查询支持groovy脚本 -->
        <groovy-all.version>2.4.21</groovy-all.version>
        <!-- http简单客户端使用 jodd是一个java工具包，添加统一版本目前只是为了使用 大数据源的jodd http实现 -->
        <jodd.version>6.3.0</jodd.version>
        <!-- 简单验证码依赖 https://github.com/ele-admin/EasyCaptcha 该库看上去好久不更新了，截止到今天 2023-04-24 最后一次更新是 2019-08-25，但能满足目前需求 -->
        <easy-captcha.version>1.6.2</easy-captcha.version>
        <!-- 开发基于s3 sdk 的对象储存 aws 提供了两个版本的sdk 分别为v1和v2版本，v2版本在2017年初始发布，是对v1版本的重构和改进，增加了非阻塞等特性-->
        <!-- 在maven仓库中 v1和v2都在同时更新 -->
        <!-- 以下为v1版本       -->
<!--        <aws-java-sdk-s3.version>1.12.455</aws-java-sdk-s3.version>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-s3</artifactId>
            <version>${aws-java-sdk-s3.version}</version>
        </dependency>-->
        <!-- 以下为v2版本 v2版本使用bom依赖-->
        <!-- v2 github https://github.com/aws/aws-sdk-java-v2 -->
        <aws-sdk-java-v2.version>2.20.52</aws-sdk-java-v2.version>

        <!-- 在 hutool 中依赖poi对excel等文档做了封装，该引入可以借用其工具使用 -->
        <!-- 推荐引入poi-ooxml，这个包会自动关联引入poi包，且可以很好的支持Office2007+的文档格式 -->
        <poi-ooxml.version>5.2.3</poi-ooxml.version>
        <poi.version>${poi-ooxml.version}</poi.version>
        <!-- 如果需要使用Sax方式读取Excel，需要引入以下依赖（POI-4.x以上这个非必须）： -->
        <xercesImpl.version>2.12.2</xercesImpl.version>

        <!-- 添加主要用于oss global-oss-boot-starter ftp上传-->
        <commons-net.version>3.9.0</commons-net.version>
        <!-- 添加主要用于oss global-oss-boot-starter sftp上传，该包截止到今天（ 2023-04-28）更新时间为 2018-11-26-->
        <jsch.version>0.1.55</jsch.version>
        <!-- 连接池，主要用于 global-oss-boot-starter ftp和sftp连接池 -->
        <commons-pool2.version>2.11.1</commons-pool2.version>
        <!-- java 对象比较使用，可以对象两个对象的修改前后差异 参见 global-tool diff包-->
        <!-- 目前（2023-05-05 最新版本为7.0.0，但发现其使用jdk11，而本项目使用jdk8，所以选用最近的一个稳定版本） -->
        <javers-core.version>6.14.0</javers-core.version>
        <!-- 结合 hutool 发送邮件 -->
        <javax.mail.version>1.6.2</javax.mail.version>
        <!-- 微信相关支持，当前添加主要是支持企业微信报警 -->
        <!-- gitee地址：https://gitee.com/binary/weixin-java-tools -->
        <wxjava.version>4.5.0</wxjava.version>

        <!-- spring boot admin 这是一个bom -->
        <spring-boot-admin.version>2.7.10</spring-boot-admin.version>

    <!--  oauth2 相关版本 原理spring security提供了 https://spring.io/projects/spring-security-oauth 授权服务，目前(2023-07-07) 已被 https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html取代  -->
    <!--  oauth2 一般分为三个版块：1. 授权服务（提供授权token） 2. 资源服务（保护资源提供资源服务并合授权服务通信验证校验token） 3. 和客户端（三方客户端请求资源）  -->
    <!--  截止到目前（2023-07-07） 授权服务（spring-authorization-server）已发展到了版本1.1.1（但从1.x开始为了支持springboot 3.0 已不再支持jdk8版本，合并必须使用jdk17版本） -->
    <!--  可喜的是 截止到目前（2023-07-07） 授权服务（spring-authorization-server）1.x以下的版本（也就是支持jdk8的版本扔在维护，因为当前约大部分java用户依然在使用jdk8），目前支持jdk8的最新版本为0.4.3  -->
    <!--  spring官网文档 在使用spring使用时引入的 <dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-oauth2-authorization-server</artifactId></dependency> 只有在spring boot 3.0以上才有，目前我们使用的 spring boot 2.x版本需要自行引入 -->
    <!--  所以这里定义一下授权服务支持jdk8的版本，如果升级到了spring boot 3.x以上直接引入 spring-boot-starter-oauth2-authorization-server 就可以了，版本就不需要在这里定义了参见：global-security-boot-starter/pom.xml-->
        <spring-authorization-server.version>0.4.3</spring-authorization-server.version>

        <!-- springboot 本身依赖了该包，在升级和新版本的idea后，提示原来springboot依赖的是1.3版本，有漏洞这里升级一下 -->
        <snakeyaml.version>2.0</snakeyaml.version>
    </properties>
    <!-- 依赖 -->
    <dependencies>

        <!-- lombok -->
        <!-- 主要用于pojo对象的get、set方法自动生成 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--mapStruct  pojo映射转换工具 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <!-- 强大工具库，当前为限流引入 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <!-- spring cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- shedlock 分布式锁 一般用于定时任务-->
            <dependency>
                <groupId>net.javacrumbs.shedlock</groupId>
                <artifactId>shedlock-bom</artifactId>
                <version>${shedlock.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- aws v2版本bom 使用方式及其可用的jar可参见下面github -->
            <!-- v2 github https://github.com/aws/aws-sdk-java-v2 -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws-sdk-java-v2.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- spring boot admin -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-dependencies</artifactId>
                <version>${spring-boot-admin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--解决spring-boot-starter-web中依赖的漏洞-->
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>
