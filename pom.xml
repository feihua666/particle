<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!-- 截止到目前（2023-12-07）该版本（2.7.18）是springboot支持的jdk1.8的最高版本 -->
        <!-- 升级spring3.x版本 -->
        <version>3.4.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.particle</groupId>
    <artifactId>particle</artifactId>
    <version>6.0.1-beta-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>particle</name>
    <description>particle project for Spring Boot</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <modules>
        <module>common</module>
        <module>component</module>
        <module>global</module>
        <module>project</module>
    </modules>
    <!-- 全局属性 -->
    <properties>
        <!-- 去掉了 maven.compiler.source 和 maven.compiler.target 使用 java.version 具体请查看springboot父pom已经配置了-->
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- spring cloud 版本 -->
        <spring-cloud.version>2024.0.1</spring-cloud.version>
        <!-- 定义项目的版本和本pom一致，所有子项目间相互依赖请使用该变量版本 -->
        <particle.version>${project.version}</particle.version>
        <!-- 第三方工具集合，请优先使用该工具集 注意升级该版本，需要注意是否在global-tool中重写的类是否有变化-->
        <hutool-all.version>5.8.38</hutool-all.version>
        <!-- 强大的java工具类 ，全局引入，方便使用-->
        <guava.version>33.3.1-jre</guava.version>
        <!-- 实体转换 -->
        <org.mapstruct.version>1.6.3</org.mapstruct.version>
        <!-- springdoc(springdoc 即是openapi3的实现，springfox其实是openapi2的实现) 版本 github：https://github.com/springdoc/springdoc-openapi 文章参考：https://www.rstk.cn/news/147270.html、https://zhuanlan.zhihu.com/p/559882901 直接引入springdoc-openapi-ui会依赖全部引入-->
        <!-- 暂注释掉，knife4j已经引入 -->
        <!--<springdoc.version>2.7.0</springdoc.version>-->
        <!-- 定义一个注解版本方便仅引入注解 该包会通过springdoc间接引入，这里有的模块仅使用注解所以单独提出来-->
        <swagger-annotations-jakarta.version>2.2.30</swagger-annotations-jakarta.version>
        <!-- 截止到现在（2023-07-19 21:54:17） swagger（其实也经不是swagger了，但ui还是用的swagger的ui，因为swagger ui v3支持openapi3规范）已经出了springdoc openapi ，只需要引入 knife4j 已经依赖引入了springdoc-->
        <!-- 文档参考：https://doc.xiaominfo.com/ 注意：该版本是三方临时版本 group已修改 参见：https://github.com/xiaoymin/knife4j/issues/865-->
        <!--<knife4j-openapi3-jakarta-spring-boot-starter.version>4.6.0</knife4j-openapi3-jakarta-spring-boot-starter.version>-->
        <!-- 下面是正式版本 -->
        <knife4j-openapi3-jakarta-spring-boot-starter.version>4.5.0</knife4j-openapi3-jakarta-spring-boot-starter.version>
        <!-- knife4j 依赖的版本有些低，这里使用高版本 -->
        <springdoc-openapi.version>2.8.9</springdoc-openapi.version>
        <!-- mybatis-plus-boot-starter -->
        <!-- 注意在升级时，因为自定义了部分逻辑，需要同步修改是否兼容 参见：global-mybatis-plus-boot-starter -->
        <!-- 注意在升级时详情查看 com.baomidou.mybatisplus.core.conditions.segments.README.md -->
        <mybatis-plus-spring-boot3-starter.version>3.5.9</mybatis-plus-spring-boot3-starter.version>

        <!-- 动态多数据源，见 global-datasource-boot-starter 引入提供统一依赖 -->
        <dynamic-datasource-spring-boot3-starter.version>4.3.1</dynamic-datasource-spring-boot3-starter.version>
        <!-- 汉字转拼音,最新版本在2016年发布 https://mvnrepository.com/artifact/com.belerweb/pinyin4j-->
        <pinyin4j.version>2.5.1</pinyin4j.version>
        <!-- 主要用于图片参数，当前主要是苹果手机图片旋转问题 最新版本在2023-11-20发布-->
        <metadata-extractor.version>2.19.0</metadata-extractor.version>
        <!-- https://github.com/oldratlee/log4j2-ttl-thread-context-map 最新版本在2022-11-13 -->
        <log4j2-ttl-thread-context-map.version>1.4.0</log4j2-ttl-thread-context-map.version>
        <!-- Log4j2 AsyncLogger 最新版本在2023-09-29 -->
        <disruptor.version>4.0.0</disruptor.version>

        <!-- 测试数据用 可以将实体填充数据 测试用例使用-->
        <jmockdata.version>4.3.0</jmockdata.version>
        <!-- shedlock是一个分页式锁支持 目前在 global-concurrency-boot-starter使用，以支持分页式锁，主要是 global-messaging-boot-starter 消息模块使用-->
        <shedlock.version>6.0.2</shedlock.version>

        <!-- 类似于freeMarker的模板引擎 -->
        <com.jfinal.enjoy>5.2.2</com.jfinal.enjoy>
        <!-- groovy脚本，添加主要是为了数据查询支持groovy脚本 已转到了apache下 -->
        <groovy-all.version>4.0.24</groovy-all.version>
        <!-- http简单客户端使用 jodd是一个java工具包，添加统一版本目前只是为了使用 大数据源的jodd http实现 -->
        <jodd.version>6.3.0</jodd.version>
        <!-- 简单验证码依赖 https://github.com/ele-admin/EasyCaptcha 该库看上去好久不更新了，截止到今天 2023-04-24 最后一次更新是 2019-08-25，但能满足目前需求 -->
        <easy-captcha.version>1.6.2</easy-captcha.version>
        <!-- 开发基于s3 sdk 的对象储存 aws 提供了两个版本的sdk 分别为v1和v2版本，v2版本在2017年初始发布，是对v1版本的重构和改进，增加了非阻塞等特性-->
        <!-- 在maven仓库中 v1和v2都在同时更新 -->
        <!-- 以下为v1版本       -->
<!--        <aws-java-sdk-s3.version>1.12.455</aws-java-sdk-s3.version>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-s3</artifactId>
            <version>${aws-java-sdk-s3.version}</version>
        </dependency>-->
        <!-- 以下为v2版本 v2版本使用bom依赖-->
        <!-- v2 github https://github.com/aws/aws-sdk-java-v2 -->
        <aws-sdk-java-v2.version>2.29.30</aws-sdk-java-v2.version>

        <!-- 在 hutool 中依赖poi对excel等文档做了封装，该引入可以借用其工具使用 -->
        <!-- 推荐引入poi-ooxml，这个包会自动关联引入poi包，且可以很好的支持Office2007+的文档格式 -->
        <poi-ooxml.version>5.3.0</poi-ooxml.version>
        <poi.version>${poi-ooxml.version}</poi.version>

        <!-- 添加主要用于oss global-oss-boot-starter ftp上传-->
        <commons-net.version>3.11.1</commons-net.version>
        <!-- 添加主要用于oss global-oss-boot-starter sftp上传 -->
        <jsch.version>0.2.21</jsch.version>
        <!-- 连接池，主要用于 global-oss-boot-starter ftp和sftp连接池 -->
        <commons-pool2.version>2.12.0</commons-pool2.version>
        <!-- java 对象比较使用，可以对象两个对象的修改前后差异 参见 global-tool diff包-->
        <javers-core.version>7.7.0</javers-core.version>
        <!-- 结合 hutool 发送邮件 -->
        <jakarta.mail.version>2.0.1</jakarta.mail.version>
        <!-- 微信相关支持，当前添加主要是支持企业微信报警 -->
        <!-- gitee地址：https://gitee.com/binary/weixin-java-tools -->
        <wxjava.version>4.6.0</wxjava.version>
        <!-- spring boot admin 这是一个bom,版本和springboot版本基本一致 https://github.com/codecentric/spring-boot-admin -->
        <spring-boot-admin.version>3.4.0</spring-boot-admin.version>
        <!-- jsoup html解析工具，主要用于抓取一些数据如：ssq历史开奖记录、解析国家统计局 统计用区划代码和城乡划分代码 -->
        <jsoup.version>1.18.3</jsoup.version>
        <!-- 地理空间的计算相关依赖版本，添加要是要临时计算一个需求：有一个geojson文件，https://geo.datav.aliyun.com/areas_v3/bound/geojson?code=100000_full -->
        <!-- 该文件坐标应该是高德地图的标签，给定一个经纬度，计算出该经纬度对应的区域 -->
        <!-- 该包对应的仓库需要额外添加，请全局搜索 gt-main 已在global-tools中的pom.xml添加 -->
        <!-- 查找最新的版本需要前往 https://repo.osgeo.org/service/rest/repository/browse/release/org/geotools/gt-main/ -->
        <geotools.version>32.1</geotools.version>
        <!-- jdk17默认不再依赖js引擎，需要自行依赖 主要是使用hutool结合 ScriptUtil使用 -->
        <nashorn-core.version>15.4</nashorn-core.version>
        <!-- 在使用大数据源时，主要用于编译，本系统默认不使用druid作为数据源连接池 -->
        <druid.version>1.2.24</druid.version>
        <!-- spring ai 注意这里使用开发里程碑预览版本-->
        <spring-ai.version>1.0.0</spring-ai.version>
        <!-- jetcache 多级缓存 阿里开源 https://github.com/alibaba/jetcache 添加主要是为了数据查询三方数据缓存，以节省费用-->
        <jetcache.version>2.7.8</jetcache.version>
    </properties>
    <!-- 依赖 -->
    <dependencies>

        <!-- lombok -->
        <!-- 主要用于pojo对象的get、set方法自动生成 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--mapStruct  pojo映射转换工具 -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <!-- 强大工具库，当前为限流引入 -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <!-- spring cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- shedlock 分布式锁 一般用于定时任务-->
            <dependency>
                <groupId>net.javacrumbs.shedlock</groupId>
                <artifactId>shedlock-bom</artifactId>
                <version>${shedlock.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- aws v2版本bom 使用方式及其可用的jar可参见下面github -->
            <!-- v2 github https://github.com/aws/aws-sdk-java-v2 -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws-sdk-java-v2.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- spring boot admin -->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-dependencies</artifactId>
                <version>${spring-boot-admin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring ai -->
            <dependency>
                <groupId>org.springframework.ai</groupId>
                <artifactId>spring-ai-bom</artifactId>
                <version>${spring-ai.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <repositories>
        <!-- maven中央仓库里面的都是spring官方发布的jar，这里面都是spring社区发布的jar，spring社区的在maven中央仓库没有，目前添加主要是使用spring ai -->
        <!-- 里程碑版本 -->
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <!-- 快照版本 -->
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>
</project>
