<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>global</artifactId>
        <groupId>com.particle</groupId>
        <version>3.0.0-beta</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>global-messaging-boot-starter</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-dto</artifactId>
            <version>${particle.version}</version>
        </dependency>
        <!-- 为了方便引入，直接引入web编译 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>provided</scope>
            <exclusions>
                <!-- 排除默认的logback，使用log4j2 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 全局并发控制 依赖全局并发控制，分布式锁 -->
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-concurrency-boot-starter</artifactId>
            <version>${particle.version}</version>
        </dependency>

        <!--  重试 版本已经在 spring boot中写的 -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <artifactId>*</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 用于切面支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- 事件支持 在 MessageEventConsumeWrapper 中使用，不强制依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- 参数验证，主要是消费配置验证 -->
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-validation-boot-starter</artifactId>
            <version>${particle.version}</version>
        </dependency>

        <!-- jdbc支持 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <exclusions>
                <!-- 排除默认的logback，使用log4j2 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- cloud stream -->
        <!-- 屏蔽消息细节，一致的方式使用消息 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
        </dependency>
        <!-- 消息测试，支持本地消息 提供本地默认的测试 test binder-->
        <!-- 该包并不能作为一个普通的binder当作本地使用，其设计目的是单元测试，一旦测试自动配置，其它中间件binder将生效 -->
        <!-- 不过在新版本中该模式已被弃用 -->
        <!-- 新版说明 https://docs.spring.io/spring-cloud-stream/docs/3.2.7/reference/html/spring-cloud-stream.html#_testing -->
        <!-- 所以升级了spring boot 到 2.7.12 spring cloud 到2021.0.7-->
<!--        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-test-support</artifactId>
            <scope>test</scope>
        </dependency>-->


        <!-- 仅测试使用，如果是单体项目，单机使用自行引入是没问题的（包内使用了测试中的一些三方类，如果正式使用将导致类找不到） -->
        <!-- 好处是就算没有引入中间件消息也会本地发送 -->
        <!-- 一旦引入并且导入配置@Import(TestChannelBinderConfiguration.class)后 spring-cloud-starter-stream-kafka 和 spring-cloud-starter-stream-rabbit 之类的就不会再自动配置了-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <type>test-jar</type>
            <classifier>test-binder</classifier>
            <scope>test</scope>
        </dependency>

<!--   jdk编译不支持jdk8 如果spring-cloud-stream升级到4.0.0以上，上面的依赖配置可以不需要了，该依赖配置就可以使用了 -->
<!--        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-test-binder</artifactId>
        </dependency>-->

        <!-- kafka支持 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-kafka</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- 依赖数据源 -->
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-datasource-boot-starter</artifactId>
            <version>${particle.version}</version>
        </dependency>

        <!-- 默认支持mysql -->
        <!-- groupId 和 artifactId 已变更 https://xuxiaowei.blog.csdn.net/article/details/127438773?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127438773-blog-129404282.235%5Ev36%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127438773-blog-129404282.235%5Ev36%5Epc_relevant_default_base3&utm_relevant_index=1 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-test</artifactId>
            <version>${particle.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-logging-boot-starter</artifactId>
            <version>${particle.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- 分布式锁 shedlock jdbc支持 -->
        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-provider-jdbc-template</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.particle</groupId>
            <artifactId>global-scheduler-boot-starter</artifactId>
            <version>${particle.version}</version>
        </dependency>
    </dependencies>

</project>