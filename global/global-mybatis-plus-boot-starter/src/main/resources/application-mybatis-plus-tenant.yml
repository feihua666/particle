particle:
  mybatis-plus:
    tenant-enable: true
    # 以下配置的表数据属于平台系统，不处理租户字段
    tenant-ignore-tables:
      - component_tenant
      - component_tenant_create_apply
      - component_tenant_user
      - component_tenant_func_application
      - component_tenant_func
      - component_user
      - component_user_identifier
      - component_user_identifier_pwd
      - component_user_login_device
      - component_user_login_record
      - global_message_event
      - global_message_event_consume_record
      - component_dict
      - component_func
      - component_func_group
      - component_func_application
      - component_func_application_func_rel
      - component_area
      - component_op_log
      - component_op_log_audit_data
      # 埋点数据是系统级别的数据
      - component_tracking_page
      - component_tracking_page_record
      # 数据查询数据相当于开发的功能为系统级别的数据
      - component_data_query_data_api
      - component_data_query_datasource
      - component_data_query_datasource_api
      - component_data_query_provider
      # 消息模板
      - component_message_template
      # oauth2 注册客户端不使用租户id
      - oauth2_registered_client
      # 客户端业务表
      - component_oauth2_registered_client
      # 开放平台相关表
      - component_openplatform_app
      - component_openplatform_app_openapi
      - component_openplatform_openapi
      - component_openplatform_openapi_fee
      - component_openplatform_openapi_record
      - component_openplatform_openapi_record_param
      - component_openplatform_provider
      - component_openplatform_provider_record
      - component_openplatform_provider_record_param
      - component_openplatform_doc_api
      - component_openplatform_doc_api_dir_rel
      - component_openplatform_doc_api_doc
      - component_openplatform_doc_api_doc_example_code
      - component_openplatform_doc_api_doc_param_field
      - component_openplatform_doc_api_doc_response_code
      - component_openplatform_doc_api_doc_template
      - component_openplatform_doc_api_doc_template_example_code
      - component_openplatform_doc_api_doc_template_param_field
      - component_openplatform_doc_api_doc_template_response_code
      - component_openplatform_doc_dir
      - component_openplatform_doc_dir_name
      # 报告相关表
      - component_report_report_api
      - component_report_segment_template
      # 使用次数相关表
      - component_usage_count_define
      - component_usage_count_config
      - component_usage_count_record
      - component_usage_count_record_detail
      # 意见反馈相关
      - component_feedback
      - component_feedback_attachment
      - component_feedback_reply
      - component_feedback_reply_attachment
      # 参数配置相关，系统参数配置不使用租户id
      - component_system_config
      # 数据范围约束相关
      - component_data_object
      - component_data_scope
      - component_data_scope_custom_data_rel
      # 数据相关
      - component_data_company
      - component_data_company_md5
      - component_data_company_md5_ids
      # 任务计划
      - component_scheduler_execute_record
      - component_scheduler_temp_task
      - component_scheduler_temp_task_run_record
      - component_scheduler_temp_task_run_record_log
    # tmdp 代表 TenantMultiDataPermission 首字母即租户多表数据权限
    tmdp:
      # 该配置是一个map，key为表名，value为条件限制，请不要添加 and 或 or 前缀，可用变量 {tenantId}=租户id，将被替换为实际租户的id
      # 下面这些配置的表是在租户拦截器忽略的，但又想通过租户区分数据
      tenantDataPermmision:
        component_tenant: component_tenant.id = {tenantId}
        component_tenant_user: component_tenant_user.tenant_id = {tenantId}
        component_tenant_func_application: component_tenant_func_application.tenant_id = {tenantId}
        component_tenant_func: component_tenant_func.tenant_id = {tenantId}
        component_user: exists(select id from component_tenant_user tu where tu.user_id = component_user.id and tu.tenant_id = {tenantId} )
        component_user_identifier: exists(select id from component_tenant_user tu where tu.user_id = component_user_identifier.user_id and tu.tenant_id = {tenantId} )
        component_user_identifier_pwd: exists(select id from component_tenant_user tu where tu.user_id = component_user_identifier_pwd.user_id and tu.tenant_id = {tenantId} )
        component_user_login_device: exists(select id from component_tenant_user tu where tu.user_id = component_user_login_device.user_id and tu.tenant_id = {tenantId} )
        component_user_login_record: exists(select id from component_tenant_user tu where tu.user_id = component_user_login_record.user_id and tu.tenant_id = {tenantId} )
        component_func_application: exists(select id from component_tenant_func_application tfp where tfp.func_application_id = component_func_application.id and tfp.tenant_id = {tenantId} )
        component_func: exists(select id from component_tenant_func tf where tf.func_id = component_func.id and tf.tenant_id = {tenantId} )
        component_func_application_func_rel: exists(select id from component_tenant_func tf where tf.func_application_id = component_func_application_func_rel.func_application_id and tf.func_id = component_func_application_func_rel.func_id and tf.tenant_id = 1 )
        component_op_log: component_tenant_user.tenant_id = {tenantId}
        component_op_log_audit_data: component_tenant_user.tenant_id = {tenantId}

